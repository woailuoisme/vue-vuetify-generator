const asyncHandler = require('./async.handler');
const {modelCapitalize} = require('../models/{modelLowercase}');
const ErrorResponse = require('../common/error.response');

const indexRequest = asyncHandler(async (req, res, next) => {
	next();
});
const showRequest = asyncHandler((req, res, next) => {
	next();
});
const storeRequest = asyncHandler(async (req, res, next) => {
	const {modelLowercase} = await {modelCapitalize}.findById(req.params.id);
	if (!{modelLowercase}) return next(new ErrorResponse(`No {modelLowercase} with the id of ${req.params.id}`), 404);
	// Make sure user is {modelLowercase} owner
	if ({modelLowercase}.user.toString() !== req.user.id && req.user.role !== 'admin') {
		return next(
			new ErrorResponse(
				`User ${req.user.id} is not authorized to update {modelLowercase} ${{modelLowercase}._id}`,
				401,
			),
		);
	}
	next();
});
const updateRequest = asyncHandler(async (req, res, next) => {
	const {modelLowercase} = await {modelCapitalize}.findById(req.params.id);
	if (!{modelLowercase}) return next(new ErrorResponse(`No {modelLowercase} with the id of ${req.params.id}`), 404);
	// Make sure user is {modelLowercase} owner
	if ({modelLowercase}.user.toString() !== req.user.id && req.user.role !== 'admin') {
		return next(
			new ErrorResponse(
				`User ${req.user.id} is not authorized to update {modelLowercase} ${{modelLowercase}._id}`,
				401,
			),
		);
	}
	next();
});
const destroyRequest = asyncHandler(async (req, res, next) => {
	const {modelLowercase} = await {modelCapitalize}.findById(req.params.id);
	if (!{modelLowercase}) return next(new ErrorResponse(`No {modelLowercase} with the id of ${req.params.id}`), 404);
	// Make sure user is {modelLowercase} owner
	if ({modelLowercase}.user.toString() !== req.user.id && req.user.role !== 'admin') {
		return next(
			new ErrorResponse(
				`User ${req.user.id} is not authorized to delete {modelLowercase} ${{modelLowercase}._id}`,
				401,
			),
		);
	}
	next();
});

module.exports = { indexRequest, storeRequest, showRequest, updateRequest, destroyRequest };
